/// pages/api/solana-price-batch.js
import clientPromise from "@/lib/mongodb";

function roundToMinute(date) {
  const newDate = new Date(date);
  newDate.setSeconds(0);
  newDate.setMilliseconds(0);
  return newDate;
}

const timeOffsets = {
  price: 0,
  price_15m: 15,
  price_30m: 30,
  price_1h: 60,
  price_3h: 180,
};

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).end();

  let { keys, token, tweet_id, key } = req.body;

  if (!keys && tweet_id && key) {
    keys = [{ tweet_id: String(tweet_id), key }];
  }

  if (!keys && req.body.tweetId && req.body.key) {
    keys = [{ tweet_id: String(req.body.tweetId), key: req.body.key }];
  }

  if (Array.isArray(req.body.keys)) {
    keys = req.body.keys.map(({ tweet_id, tweetId, key }) => ({
      tweet_id: String(tweet_id || tweetId),
      key,
    }));
  }

  if (!Array.isArray(keys) || keys.length === 0 || !token) {
    return res.status(400).json({ error: "Missing keys or token" });
  }

  const client = await clientPromise;
  const db = client.db("ctScreener");

  const priceMap = {};

  for (const k of keys) {
    const tweetIdStr = String(k.tweet_id);

    const priceDoc = await db.collection("tweet_prices").findOne(
      {
        tweet_id: tweetIdStr,
        token,
        key: k.key,
        price: { $ne: null },
      },
      {
        sort: { fetched_at: -1 },
      },
    );

    if (priceDoc && priceDoc.price != null) {
      priceMap[`${tweetIdStr}-${k.key}`] = priceDoc.price;
    } else {
      console.log(
        `⚠️ No price found for tweet_id=${tweetIdStr} key=${k.key} token=${token}`,
      );
    }
  }

  console.log("✅ Returning prices:", Object.keys(priceMap));

  return res.status(200).json({
    prices: Object.entries(priceMap).map(([k, v]) => {
      const [tweet_id, key] = k.split("-");
      return { tweet_id, key, price: v };
    }),
  });
}
